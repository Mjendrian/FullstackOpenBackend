{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Form","params","inputFields","submitAction","onSubmit","map","inputField","title","value","onChange","type","Filter","props","handleNameFilterChange","newNameFilter","Persons","persons","deletePerson","person","name","number","onClick","Notification","notification","message","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setNewNameFilter","duration","setNotification","useEffect","personService","initialPersons","event","target","personsToShow","filter","toUpperCase","indexOf","preventDefault","find","alert","window","confirm","newPerson","returnedPerson","mappedPerson","setTimeout","catch","error","console","log","status","updatePerson","concat","err","personToRemove","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd5bc5b4.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst delPerson = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, delPerson }","import React, { useState, useEffect } from 'react'\r\nimport personService from './services/persons.js'\r\nimport './index.css'\r\n\r\n// Composant to Show the input Form to add new Contacts\r\nconst Form = (params) => {\r\n  const inputFields = params.inputFields\r\n  const submitAction = params.submitAction\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <form onSubmit={ submitAction }>\r\n\r\n        { inputFields.map(inputField =>\r\n          <div key={ inputField.id }>\r\n            { inputField.title } : <input value={ inputField.value } onChange={ inputField.onChange }/>\r\n          </div>\r\n        ) }\r\n\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\n// Composant to show the Filter\r\nconst Filter = (props) => {\r\n  const handleNameFilterChange = props.onChange\r\n  const newNameFilter = props.value\r\n  return (\r\n    <div>\r\n      <h2>Filter the Contacts by Name</h2>\r\n      <input value={ newNameFilter } onChange={ handleNameFilterChange } />\r\n    </div>\r\n  )\r\n}\r\n\r\n// Composant to Show the Number list\r\nconst Persons = ({ persons, deletePerson }) => {\r\n  return (\r\n    <div>\r\n      <h2>Numbers</h2>\r\n      <ul>\r\n        { persons.map(person =>\r\n          <li key={ person.id }>{ person.name } : { person.number } <button onClick={ () => deletePerson(person.id) }>Remove</button></li>\r\n        ) }\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Notification = ({ notification }) => {\r\n\r\n  if (notification.message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className={ notification.type }>\r\n      {notification.message}\r\n    </div>\r\n  )\r\n}\r\n\r\n// Main App Composant\r\nconst App = () => {\r\n  const [ persons, setPersons ] = useState([])\r\n\r\n  // State for Name Input Field\r\n  const [ newName, setNewName ] = useState('')\r\n  // State for Number Input Field\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  // State for Name filter Input Field\r\n  const [ newNameFilter, setNewNameFilter ] = useState('')\r\n  // State for Notification\r\n  const [notification, setNotification] = useState({ message : null, type : 'success' , duration : 3 })\r\n\r\n  useEffect(() => {\r\n    personService\r\n      .getAll()\r\n      .then(initialPersons => {\r\n        setPersons(initialPersons)\r\n      })\r\n  }, [])\r\n\r\n  // Handler for Name Input Field\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  // Handler for Number Input Field\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n  // Handler for Name Filter Field\r\n  const handleNameFilterChange = (event) => {\r\n    setNewNameFilter(event.target.value)\r\n  }\r\n\r\n  // Array containing the input field definitions\r\n  const inputFields = [\r\n    { id : 0,\r\n      title : 'Name',\r\n      onChange : handleNameChange,\r\n      value : newName\r\n    },\r\n    { id : 1,\r\n      title : 'Number',\r\n      onChange : handleNumberChange,\r\n      value : newNumber\r\n    }\r\n  ]\r\n\r\n  // Function to update a Contact\r\n  const updatePerson = (person, newNumber) => {\r\n    const newPerson = { ...person, number: newNumber }\r\n\r\n    personService\r\n      .update(newPerson.id, newPerson)\r\n      .then(returnedPerson => {\r\n        setPersons(persons.map(mappedPerson => mappedPerson.id !== newPerson.id ? mappedPerson : returnedPerson))\r\n        const notification = { message : `The contact information for ${returnedPerson.name} has been updated.`, type : 'success' }\r\n        setNotification(notification)\r\n        setTimeout(() => setNotification({ message : null, type : null }), 3000)\r\n        setNewName('')\r\n        setNewNumber('')\r\n      })\r\n      .catch(error => {\r\n        console.log(error.response)\r\n        if(error.response.status === 400) {\r\n          console.log(error)\r\n          const notification = { message : `The contact ${person.name} has already been deleted from the server.`, type : 'error' }\r\n          setNotification(notification)\r\n          setPersons(persons.filter(mappedPerson => mappedPerson.id !== person.id))\r\n        } else if (error.response.status === 500) {\r\n          const notification = { message : error.response.data.error, type : 'error' }\r\n          setNotification(notification)\r\n        }\r\n        setTimeout(() => setNotification({ message : null, type : null }), 3000)\r\n      })\r\n\r\n  }\r\n\r\n  // Function to add a new Contact\r\n  const addPerson = (event) => {\r\n    event.preventDefault()\r\n    const person = persons.find(person => person.name === newName)\r\n    if (person && person.number === newNumber) {\r\n      alert(`The contact ${newName} with the number ${newNumber} does already exist in the phonebook.`)\r\n      return\r\n    } else if (persons.find(person => person.name === newName) && newNumber !== '') {\r\n      const result = window.confirm(`The contact ${newName} is already present with the number ${person.number}. Do you want to update the number ?`)\r\n      if (result === true) {\r\n        updatePerson(person, newNumber)\r\n        return\r\n      }else{\r\n        return\r\n      }\r\n    }\r\n\r\n    if( newName === '' || newNumber === '') return\r\n    const personObject = {\r\n      name: newName,\r\n      number : newNumber\r\n    }\r\n\r\n    personService\r\n      .create(personObject)\r\n      .then(returnedPerson => {\r\n        setPersons(persons.concat(returnedPerson))\r\n        setNewName('')\r\n        setNewNumber('')\r\n        const notification = { message : `The contact ${returnedPerson.name} has been added to the phonebook.`, type : 'success' }\r\n        setNotification(notification)\r\n        setTimeout(() => setNotification({ message : null, type : null }), 3000)\r\n      })\r\n      .catch( err => {\r\n        console.log(err.response)\r\n        const notification = { message : err.response.data.error, type : 'error' }\r\n        setNotification(notification)\r\n      })\r\n\r\n  }\r\n\r\n  // Function to delete an existant contact\r\n  const deletePerson = (id) => {\r\n    const personToRemove = persons.find(person => person.id === id)\r\n    const result = window.confirm(`Do you really want to delete the Contact ${personToRemove.name } ?`)\r\n    if(result !== true)\r\n      return\r\n    personService\r\n      .delPerson(id)\r\n      .then(() => {\r\n        const notification = { message : `The contact ${personToRemove.name} has been deleted from the phonebook.`, type : 'success' }\r\n        setNotification(notification)\r\n        setTimeout(() => setNotification({ message : null, type : null }), 3000)\r\n        setPersons(persons.filter(person => person.id !== id))\r\n      })\r\n  }\r\n\r\n  // Name Filter application\r\n  const personsToShow = newNameFilter === ''\r\n    ? persons\r\n    : persons.filter( person => person.name.toUpperCase().indexOf(newNameFilter.toUpperCase()) !== -1 )\r\n\r\n  return (\r\n    <div>\r\n      <Notification notification={notification}/>\r\n      <Form inputFields={ inputFields } submitAction={ addPerson }/>\r\n      <Filter value={ newNameFilter } onChange={ handleNameFilterChange } />\r\n      <Persons persons={ personsToShow } deletePerson={ deletePerson } />\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React  from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App.js'\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}