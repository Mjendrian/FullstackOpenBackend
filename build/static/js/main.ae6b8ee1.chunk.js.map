{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Form","params","inputFields","submitAction","onSubmit","map","inputField","title","value","onChange","type","Filter","props","handleNameFilterChange","newNameFilter","Persons","persons","deletePerson","person","name","number","onClick","Notification","notification","message","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setNewNameFilter","duration","setNotification","useEffect","personService","initialPersons","event","target","personsToShow","filter","toUpperCase","indexOf","preventDefault","find","alert","window","confirm","newPerson","returnedPerson","mappedPerson","setTimeout","catch","error","console","log","status","updatePerson","concat","err","personToRemove","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ae6b8ee1.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst delPerson = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, delPerson }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons.js'\nimport './index.css'\n\n// Composant to Show the input Form to add new Contacts\nconst Form = (params) => {\n  const inputFields = params.inputFields\n  const submitAction = params.submitAction\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <form onSubmit={ submitAction }>\n        \n        { inputFields.map(inputField => \n          <div key={ inputField.id }>\n            { inputField.title } : <input value={ inputField.value } onChange={ inputField.onChange }/>\n          </div>\n        ) }\n        \n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n  </div>\n  )\n}\n\n// Composant to show the Filter\nconst Filter = (props) => {\n  const handleNameFilterChange = props.onChange\n  const newNameFilter = props.value \n  return (\n    <div>\n      <h2>Filter the Contacts by Name</h2>\n      <input value={ newNameFilter } onChange={ handleNameFilterChange } />\n    </div>\n  )\n}\n\n// Composant to Show the Number list\nconst Persons = ({ persons, deletePerson }) => {\n  return (\n    <div>\n      <h2>Numbers</h2>\n      <ul>\n        { persons.map(person => \n          <li key={ person.id }>{ person.name } : { person.number } <button onClick={ () => deletePerson(person.id) }>Remove</button></li>\n        ) }\n      </ul>\n    </div>     \n  )\n}\n\nconst Notification = ({ notification }) => {\n\n  if (notification.message === null) {\n    return null\n  }\n\n  return (\n    <div className={ notification.type }>\n      {notification.message}\n    </div>\n  )\n}\n\n// Main App Composant\nconst App = () => {  \n  const [ persons, setPersons ] = useState([])\n\n  // State for Name Input Field\n  const [ newName, setNewName ] = useState('')\n  // State for Number Input Field\n  const [ newNumber, setNewNumber ] = useState('')\n  // State for Name filter Input Field\n  const [ newNameFilter, setNewNameFilter ] = useState('')\n  // State for Notification\n  const [notification, setNotification] = useState({ message : null, type : 'success' , duration : 3 })\n\n  useEffect(() => {    \n    personService      \n      .getAll()      \n      .then(initialPersons => {        \n        setPersons(initialPersons)    \n    })  \n  }, [])  \n\n  // Handler for Name Input Field\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)     \n  }\n\n  // Handler for Number Input Field\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)     \n  }\n\n  // Handler for Name Filter Field\n  const handleNameFilterChange = (event) => {\n    setNewNameFilter(event.target.value)     \n  }\n\n  // Array containing the input field definitions\n  const inputFields = [\n    { id : 0,\n      title : \"Name\",\n      onChange : handleNameChange,\n      value : newName\n    },\n    { id : 1,\n      title : \"Number\",\n      onChange : handleNumberChange,\n      value : newNumber\n    }\n  ]\n\n  // Function to update a Contact\n  const updatePerson = (person, newNumber) => {\n    const newPerson = { ...person, number: newNumber }\n  \n    personService      \n    .update(newPerson.id, newPerson)      \n    .then(returnedPerson => {        \n      setPersons(persons.map(mappedPerson => mappedPerson.id !== newPerson.id ? mappedPerson : returnedPerson))\n      const notification = {message : `The contact information for ${returnedPerson.name} has been updated.`, type : 'success' }\n      setNotification(notification)  \n      setTimeout(() => setNotification({ message : null, type : null }), 3000) \n      setNewName('')   \n      setNewNumber('')        \n    })\n    .catch(error => {\n      console.log(error.response)\n      if(error.response.status === 400) {\n        console.log(error)\n        const notification = {message : `The contact ${person.name} has already been deleted from the server.`, type : 'error' }\n        setNotification(notification)\n        setPersons(persons.filter(mappedPerson => mappedPerson.id !== person.id))\n      } else if (error.response.status === 500) {\n        const notification = {message : error.response.data.error, type : 'error' }\n        setNotification(notification)\n      }   \n      setTimeout(() => setNotification({ message : null, type : null }), 3000)\n    })\n\n  }\n\n  // Function to add a new Contact\n  const addPerson = (event) => {    \n    event.preventDefault()\n    const person = persons.find(person => person.name === newName)\n    if (person && person.number === newNumber) {\n      alert(`The contact ${newName} with the number ${newNumber} does already exist in the phonebook.`)\n      return \n    } else if (persons.find(person => person.name === newName) && newNumber !== \"\") {\n      const result = window.confirm(`The contact ${newName} is already present with the number ${person.number}. Do you want to update the number ?`)\n      if (result === true) {\n        updatePerson(person, newNumber)\n        return\n      }else{\n        return \n      }\n    }\n\n    if( newName === \"\" || newNumber === \"\") return\n    const personObject = {\n      name: newName,\n      number : newNumber\n    }\n\n    personService      \n    .create(personObject)      \n    .then(returnedPerson => {        \n      setPersons(persons.concat(returnedPerson))        \n      setNewName('')   \n      setNewNumber('')\n      const notification = {message : `The contact ${returnedPerson.name} has been added to the phonebook.`, type : 'success' }\n      setNotification(notification)  \n      setTimeout(() => setNotification({ message : null, type : null }), 3000) \n    })\n    .catch( err => {\n      console.log(err.response)\n      const notification = {message : err.response.data.error, type : 'error' }\n      setNotification(notification)\n    })    \n  \n  }  \n\n  // Function to delete an existant contact\n  const deletePerson = (id) => {\n    const personToRemove = persons.find(person => person.id === id)\n    const result = window.confirm(`Do you really want to delete the Contact ${personToRemove.name } ?`)\n    if(result !== true) \n      return\n    personService      \n    .delPerson(id)      \n    .then(returnedPerson => {        \n      const notification = {message : `The contact ${personToRemove.name} has been deleted from the phonebook.`, type : 'success' }\n      setNotification(notification)  \n      setTimeout(() => setNotification({ message : null, type : null }), 3000)\n      setPersons(persons.filter(person => person.id !== id))         \n    })    \n  }\n\n  // Name Filter application\n  const personsToShow = newNameFilter === \"\"\n    ? persons\n    : persons.filter( person => person.name.toUpperCase().indexOf(newNameFilter.toUpperCase()) !== -1 )\n\n  return (\n    <div>\n      <Notification notification={notification}/>\n      <Form inputFields={ inputFields } submitAction={ addPerson }/>\n      <Filter value={ newNameFilter } onChange={ handleNameFilterChange } />\n      <Persons persons={ personsToShow } deletePerson={ deletePerson } />\n      \n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}