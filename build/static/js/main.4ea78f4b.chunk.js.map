{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"8LAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCRpCK,EAAU,aAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCVrCK,G,MAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKd,UAAU,QAAf,SACGc,MAKDC,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GA6FSC,EAxFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAEGzB,MAAK,SAAA0B,GACJT,EAASS,QAEZ,IAGH,IA0CMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAtC,GAAI,OAAIA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAce,QAASc,IACvB,8BACE,yBAAQ1B,QAAS,kBAAMyB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGO,EAAYE,KAAI,SAACvC,EAAMwC,GAAP,OACb,cAAC,EAAD,CAEExC,KAAMA,EACNC,iBAAkB,kBA3CH,SAACc,GAC1B,IAAMf,EAAO0B,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAOA,KAChC4B,EAAW,2BAAQ3C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDgC,EACQpB,EAAI4B,GACXjC,MAAK,SAAAkC,GACJjB,EAASD,EAAMa,KAAI,SAAAvC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAO4C,SAEpDC,OAAM,SAAAC,GACLb,EAAgB,SAAD,OACJjC,EAAKK,QADD,sCAGf0C,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAI,GAAC,OAAIA,EAAE3B,KAAOA,SA2BJiC,CAAmBhD,EAAKe,MAF3CyB,QAMb,uBAAMS,SAhEM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB/C,QAASuB,EACTyB,MAAM,IAAIC,MAAOC,cACjBpD,UAAWqD,KAAKC,SAAW,IAG7BtB,EACQiB,GACP1C,MAAK,SAAAkC,GACJjB,EAASD,EAAMgC,OAAOd,IACtBf,EAAW,QAoDX,UACE,uBAAO8B,MAAO/B,EAASgC,SA5BJ,SAACV,GACxBW,QAAQC,IAAIZ,EAAMa,OAAOJ,OACzB9B,EAAWqB,EAAMa,OAAOJ,UA2BpB,wBAAQK,KAAK,SAAb,qBAEF,cAAC,EAAD,QC9GNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.4ea78f4b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n\r\n  return (\r\n    <li className='note'>\r\n      {note.content} \r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\nimport './index.css'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Footer = () => {  \r\n  const footerStyle = {    \r\n    color: 'green',    \r\n    fontStyle: 'italic',    \r\n    fontSize: 16  \r\n  }  \r\n  return (    \r\n    <div style={footerStyle}>      \r\n      <br />      \r\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>    \r\n    </div>  \r\n    )\r\n  }\r\n\r\nconst App = () => {  \r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('') \r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(() => {    \r\n    noteService      \r\n      .getAll()      \r\n      .then(initialNotes => {        \r\n        setNotes(initialNotes)    \r\n    })  \r\n  }, [])  \r\n\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5,\r\n    }\r\n\r\n    noteService      \r\n    .create(noteObject)      \r\n    .then(returnedNote => {        \r\n      setNotes(notes.concat(returnedNote))        \r\n      setNewNote('')      \r\n    })\r\n  \r\n  }\r\n\r\n  const toggleImportanceOf = (id) => {    \r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n  \r\n    noteService      \r\n    .update(id, changedNote)      \r\n    .then(returnedNote => {        \r\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n    })\r\n    .catch(error => {      \r\n      setErrorMessage(          \r\n        `Note '${note.content}' was already removed from server`        \r\n      )        \r\n      setTimeout(() => {          \r\n        setErrorMessage(null)        \r\n      }, 5000)     \r\n      setNotes(notes.filter(n => n.id !== id))    \r\n    })\r\n  }\r\n\r\n  const handleNoteChange = (event) => {    \r\n    console.log(event.target.value)    \r\n    setNewNote(event.target.value)  \r\n  }\r\n\r\n  const notesToShow = showAll    \r\n    ? notes    \r\n    : notes.filter(note => note.important)\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      <div>        \r\n        <button onClick={() => setShowAll(!showAll)}>          \r\n          show {showAll ? 'important' : 'all' }        \r\n        </button>      \r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note, i) => \r\n            <Note \r\n              key={i} \r\n              note={note} \r\n              toggleImportance={() => toggleImportanceOf(note.id)}\r\n            />\r\n        )}\r\n      </ul>\r\n      <form onSubmit={addNote}>        \r\n        <input value={newNote} onChange={handleNoteChange} />       \r\n        <button type=\"submit\">save</button>      \r\n      </form>       \r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App.js'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}